{Dicas}
<<comentario>>
Esta linha corresponde a uma linha comentada na linguagem C, sendo que, estes são feitos através do uso de barras duplas "//" no começo de uma linha ou através do uso do comando "/*linhas que você deseja comentar*/".

Exemplo:
 
//isto é uma comentario.

<<fim>>
<<main>>
O comando Algoritmo em PORTUGOL equivale a função "main" da linguagem C,  ou seja, deve estar sempre presente no código. Além disso esta função é considerada a principal de um programa em C, uma vez que esta é sempre a primeira a ser chamada alem de possuir em sua essência um esboço do que o programa faz.

A sua sintaxe é: 

int main(int argc, char *argv[])
{
<lista de comandos>
}

É importante resalvar que, esta pode receber apenas os dois argumentos argc  e argv ou nenhum argumento, ficando com a seguinte forma:

int main()
{
<lista de comandos>
}

Exemplo:

int main(int argc, char *argv[])
{
	printf("Olá mundo!");
	printf("Estou aprendendo a linguagem C!"); 
	return 0;  
} 
<<fim>>
<<abrechaves>>
O comando inicio do PORTUGOL equivale ao elemento "{" abre chaves do C e possui a mesma função deste que é indicar o começo de um bloco de instruções.
<<fim>>
<<fechachaves>>
Este comando indica o fim de um programa ou sub-rotina e o elemento "}" é o equivalente em C e possui a funcionalidade de indicar o fim de um bloco de comandos ou de uma função.
<<fim>>
<<scanf>>
O comando "leia" possui como equivalente em C a função scanf() que é responsável por armazenar nas variaveis o conteudo inserido pelo teclado. Para fazer o uso desta função é necessario declarar a biblioteca "stdio.h".

Sintaxe desta função é: 

scanf(<"formatador">,<variável>);

Sendo que os farmatadores são: "%d" para inteiros(int), "%f" para reais(float) e "%c" para caracteres. 

Exemplo de um programa que lê uma idade:

#include <stdio.h>

//variável que armazenará a idade do usuário.
int idade;

int main(int argc, char *argv[])
{
	printf("Qual é a sua idade?");
	scanf("%d", &idade);
	printf("Sua idade é", idade); 
	return 0;  
} 
<<fim>>
<<printf>>
O comando "escreva ou escreval" possui como equivalente em C a função printf() que é responsável por exibir na tela mensagens ou o conteudo de variaveis e constantes. Para fazer o uso desta função é necessario declarar a biblioteca "stdio.h".

A sintaxe desta função é:

printf(<"formatador">,<variável>);

Sendo que os farmatadores são: "%d" para inteiros(int), "%f" para reais(float) e "%c" para caracteres. 

Exemplo de um programa que informa uma idade:

#include <stdio.h>

//variável que armazenará a idade do usuário.
int idade;

int main(int argc, char *argv[])
{
	printf("Qual é a sua idade?");
	scanf("%d", &idade);
	printf("Sua idade é %d", idade); 
	return 0;  
} 
<<fim>>
<<function>>
Na linguagem C as funções são declaradas sem há necessidade de se usar a palavra reservada funcao, sendo que estas possuem em C a mesma finalidade do PORTUGOL.

A sintaxe para declarar qualquer função é:

<tipoDeDadoRetornado> nomeDaFuncao(<listaDeParametros>)
{
<comandos>
}

Exemplo de uma função simples:

float soma(float a, float b)
{
	return a + b;
}
<<fim>>
<<assign>>
Em C uma atribuição ocorre de forma semelhante ao PORTUGOL, ou seja, possui o nome de uma variavel do lado esquerdo e um valor ou ou expressão do lado direito. A diferença entre estas expressões está relacionada com o operador de atribuição utilizado, uma vez que no C o operador utilizado e o "="(igual).

Exemplo de atibuição:

bool AsomaEumNumeroPar(int a, int b)
{
	int soma, resto;
	soma = a + b;
	//O operador "%" é utilizado para se obter o resto da divisão entre numeros inteiros.
	resto = soma % 2;
	//retorna verdadeiro se resto é igual a zero.
	return (resto == 0);
}
<<fim>>
<<if>>
O comando se do PORTUGOL corresponde ao comando if da linguagem C, sendo que, este possui sintaxe e finalidade semelhante.

A sua sintaxe é:

if (<condição>)
{
<bloco de comandos>
}else{
<bloco de comandos>
}

 A clausula else é opcional e equivale a cluasula senao.

Exemplo:

float saldo;

bool autoriza (int valor)
{
	saldo = 1000;
	if ((saldo-valor) > 0)
	{
		return true;
	}else{
		return false;
	}
}
<<fim>>
<<else>>
A claúsula senao corresponde a clausula "else" da linguagem C, sendo que a claúsula "else" também possui uso opcional.

Exemplo:

float saldo;

bool autoriza (int valor)
{
	saldo = 1000;
	if ((saldo-valor) > 0)
	{
		return true;
	}else{
		return false;
	}
}
<<fim>>
<<switch>>
Este comando equivale ao comando switch da linguagem C.

A forma geral deste é:

switch <expressão>
{
case <constante1>:
 sequencia de comandos;
break; 
...
case <constanteN>:
sequencia de comandos;
break;
Default:
<sequencia de comandos>
}

Sendo que, <expressão> é uma constante inteira ou carácter ou quaquer comando que devolva valores destes tipos.

Exemplo:

void cores(char cor)
{
	switch(cor)
	{
		case 'v':
		printf("você escolheu vermelho.");
		break;
		case 'a':
		printf("você escolheu azul.");
		break;
		case 'p':
		printf("você escolheu preto.");
		break;
	}
		
}
<<fim>>
<<case>>
O comando caso do PORTUGOL equivale ao rotulo "case" da linguagem C, sendo que este possui a mesma finalidade.

Sua sintaxe é: 

case <constante1>:
<sequencia de comandos>;
break;. 

É importante mensionar que o comando "break" após a sequencia de comandos de um rotulo "case" que foi correspondindo encerra o switch, para que este não precise gastar tempo verificando os rotulos seguintes, uma vez que este não correspondem com a expressão.

Exemplo:

void cores(char cor)
{
	switch(cor)
	{
		case 'v':
		printf("você escolheu vermelho.");
		break;
		case 'a':
		printf("você escolheu azul.");
		break;
		case 'p':
		printf("você escolheu preto.");
		break;
	}
		
}
<<fim>>
<<default>>
A clausula outrocaso possui como equivalente a clausula "default" na linguagem C, sendo que a clusula em C possui a mesma finalidade desta, além de ser também opcional.

A sua sintaxe é:

default:
<sequencia de comandos>;

Exemplo:

void cores(char cor)
{
	switch(cor)
	{
		case 'v':
		printf("você escolheu vermelho.");
		break;
		case 'a':
		printf("você escolheu azul.");
		break;
		case 'p':
		printf("você escolheu preto.");
		break;
		default: 
		printf("escolha uma cor valida.");
	}
}
<<fim>>
<<for>>
Este laço possui como correspondente na linguagem C o laço for, sendo que o laço em C possui a mesma finalidade, porem sua sintaxe difere em alguns casos da sintaxe do laço para.

A sua forma geral é:

for (<inicialização>;<condição>;<incremento> )
{
<bloco de comandos>
}

Sendo que, na versão geral do laço este possui três sessões que são a inicialização aonde um contador tem seu valor inicial definido, a condição que é um valor ou expressão que indica quando o laço deve acabar e o incremento que consiste em uma operação que modifica o valor atual do contador toda vez que o laço é iterado.

Exemplo de inicialização de um vetor utilizando o laço for:

int i;
char letras[23];

int main(int argc, char *argv[])
{
	...
	for (i ==0; i < strlen(letras); i++)
	{
		letras[i] = '#0';
	}
	...
	return 0;
}
<<fim>>
<<while>>
Este laço possui como equivalente na linguagem C o laço while, sendo que este laço em C possui a mesma finalidade e sintaxe.

A forma geral deste é:

while(<condição>)
{
<bloco de comando>
}

Sendo que, a condição geralmente é uma expressão que deve retornar verdadeiro, ou seja um valor diferente de zero, para que o laço itere. O laço para de iterar quando a condição se torna falsa.

Exemplo:

char tecla;

int main(int argc, char *argv[])
{
	while (tecla != "n")
	{
		printf("Este laço não esta fazendo algo! ");
		printf("deseja continua? s \ n");
		scanf("%c", &tecla);		
	}
	...
	return 0;
}
<<fim>>
<<do>>
Este laço possui como correspondente na linguagem C o laço do-while, sendo que este laço em C possui a mesma sintaxe e finalidade.

A sua forma geral é:

do
{
bloco de comandos
}
while(<condição>);

sendo que, a condição geralmente é uma expressão que deve retornar verdadeiro, ou seja um valor diferente de zero, para que o laço itere. O laço para de iterar quando a condição se torna falsa.

<<fim>>
<<do-while>>
Este laço possui como correspondente na linguagem C o laço do-while, sendo que este laço em C possui a mesma sintaxe e finalidade.

A sua forma geral é:

do
{
bloco de comandos
}
while(<condição>);

Sendo que, a condição geralmente é uma expressão que deve retornar verdadeiro, ou seja um valor diferente de zero, para que o laço itere. O laço para de iterar quando a condição se torna falsa.

Exemplo

char tecla;

int main(int argc, char *argv[])
{
	do
	{
		printf("este laço não esta fazendo algo! ");
		printf("deseja continua? s \ n");
		scanf("%c", tecla);		
	}
	while (tecla != "n")
	...
	return 0;
}
<<fim>>
<<retun>>
Este comando possui como equivalente na linguagem C o comando "retun" que possui a mesma finalidade deste, ou seja, termina a função na linha em que foi encontrado e devolve um valor calculado por esta função, sendo que este deve ser do mesmo tipo do tipo de dado retornado pela função.
<<fim>>
<<procedure>>
Na linguagem C procedimentos são declarados sem a necessidade de se usar a palavra reservada "procedimento". Assim como no PORTUGOL os procedimentos na linguagem C realizam tarefas e não retornam valores. 

A declaração de um procedimento em C e realizada da seguinte forma:

void nomeProcedimento(<lista de paremetros>)
{
<comandos>
}

Sendo que, a palavra reservada "void" é de uso obrigatorio, uma vez que, esta indica que a sub-rotina declarada não retornará qualquer valor.

Exemplo de procedimento:

void cores(char cor)
{
	switch(cor)
	{
		case 'v':
		printf("você escolheu vermelho.");
		break;
		case 'a':
		printf("você escolheu azul.");
		break;
		case 'p':
		printf("você escolheu preto.");
		break;
		default: 
		printf("escolha uma cor valida.");
	}
}
<<fim>>
<<callmethod>>
Este comando corresponde a chamada de uma sub-rotina em C, sendo que, esta possui a mesma finalidade e sintaxe.

Exemplo:

void boaAula()
{
	printf("boa aula");
}

int main (int argc, *char argv[])
{
	...
	boaAula();
	...
}
<<fim>>